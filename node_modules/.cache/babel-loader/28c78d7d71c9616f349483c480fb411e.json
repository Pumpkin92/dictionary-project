{"ast":null,"code":"var _jsxFileName = \"/Users/lucyshaw/Documents/GitHub/dictionary-project/src/PlaySound.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Sound from \"react-sound\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlaySound(props) {\n  _s();\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Sound, {\n      url: props.PlaySound,\n      playStatus: Sound.status.PLAYING,\n      playFromPosition: 300\n      /* in milliseconds */\n      ,\n      onLoading: this.handleSongLoading,\n      onPlaying: this.handleSongPlaying,\n      onFinishedPlaying: this.handleSongFinishedPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlaySound, \"dxr5RgzQJlMZkbQdHY9iHZ+FF0w=\");\n\n_c = PlaySound;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaySound\");","map":{"version":3,"sources":["/Users/lucyshaw/Documents/GitHub/dictionary-project/src/PlaySound.js"],"names":["React","useState","Sound","PlaySound","props","isPlaying","setIsPlaying","status","PLAYING","handleSongLoading","handleSongPlaying","handleSongFinishedPlaying"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AACvC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,sBACE;AAAA,2BACE,QAAC,KAAD;AACE,MAAA,GAAG,EAAEG,KAAK,CAACD,SADb;AAEE,MAAA,UAAU,EAAED,KAAK,CAACK,MAAN,CAAaC,OAF3B;AAGE,MAAA,gBAAgB,EAAE;AAAI;AAHxB;AAIE,MAAA,SAAS,EAAE,KAAKC,iBAJlB;AAKE,MAAA,SAAS,EAAE,KAAKC,iBALlB;AAME,MAAA,iBAAiB,EAAE,KAAKC;AAN1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAduBR,S;;KAAAA,S","sourcesContent":["import React, { useState } from \"react\";\nimport Sound from \"react-sound\";\n\nexport default function PlaySound(props) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  return (\n    <div>\n      <Sound\n        url={props.PlaySound}\n        playStatus={Sound.status.PLAYING}\n        playFromPosition={300 /* in milliseconds */}\n        onLoading={this.handleSongLoading}\n        onPlaying={this.handleSongPlaying}\n        onFinishedPlaying={this.handleSongFinishedPlaying}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}